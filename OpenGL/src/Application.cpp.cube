#include "pch.h"

const unsigned int WIDTH = 1792, HEIGHT = 934;
static const float aspectRatio = static_cast<float>(WIDTH) / static_cast<float>(HEIGHT); // 屏幕比例
static float image_scale[3] = { 1.0f,1.0f,1.0f }; // 图像缩放倍率
static float ui_scale = 1.4f; // ImGui 缩放
static ImVec4 clear_color = ImVec4(IMGUI_SKY_BLUE, 1.00f);
static ImVec4 pureObjectColor = ImVec4(PURE_WHITE, 1.00f);
static ImVec4 lightColor = ImVec4(PURE_WHITE, 1.00f);
static glm::vec3 lightPos(1.2f, 1.0f, 2.0f); // 光源位置

static int debugMode = 0;
static const char* debugModes[] = { "Release", "Normal", "FragPos" };

static bool isLightRolling = false;
static bool showTexture = true;

enum class RenderMode
{
    pureColor = 0,
    texture = 1
};

const char* glsl_version = "#version 330";

int main()
{  
    cameraSpeed = cameraSpeed_std;

    glEnable(GL_CULL_FACE);
    glCullFace(GL_BACK);  // 忽略背面

    auto window = init::Init("--- LearnOpenGL", WIDTH, HEIGHT, VERSION_1, VERSION_2, USE_CORE);
    if (!window) {
        std::cerr << "Failed to init window!" << std::endl;
        return -1;
    }
    // 设置边框颜色为黑色
    // SetWindowBorderColor(window, RGB(0, 0, 0));
    {   // openGL自身问题：关闭窗口的时候，程序不会完全退出(check error返回一个error无限循环)。因此用作用域框起来(Cherno S13末尾)
        // glViewport(0, 0, WIDTH, HEIGHT); // 设置初始视口
        Shader objectShader("res/shaders/object/object.shader");
        Shader lightShader("res/shaders/Light.shader");
        // 设置用户指针为 Shader 对象
        // glfwSetWindowUserPointer(window, &shader);
        // glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
        float vertices[] = {
            // ---- 位置 ----       ---- 颜色 ----      - 纹理坐标 -       - 顶点法向量 -    - 纹理索引 -
            // 前面
            -0.5f, -0.5f,  0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 0.0f,   0.0f,  0.0f,  1.0f,   1.0f,
             0.5f, -0.5f,  0.5f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f,   0.0f,  0.0f,  1.0f,   1.0f,
             0.5f,  0.5f,  0.5f,   0.0f, 0.0f, 1.0f,   1.0f, 1.0f,   0.0f,  0.0f,  1.0f,   1.0f,
             0.5f,  0.5f,  0.5f,   0.0f, 0.0f, 1.0f,   1.0f, 1.0f,   0.0f,  0.0f,  1.0f,   1.0f,
            -0.5f,  0.5f,  0.5f,   1.0f, 1.0f, 0.0f,   0.0f, 1.0f,   0.0f,  0.0f,  1.0f,   1.0f,
            -0.5f, -0.5f,  0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 0.0f,   0.0f,  0.0f,  1.0f,   1.0f,
            // 后面                                                                        
            -0.5f, -0.5f, -0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 0.0f,   0.0f,  0.0f, -1.0f,   1.0f,
            -0.5f,  0.5f, -0.5f,   0.0f, 1.0f, 0.0f,   1.0f, 0.0f,   0.0f,  0.0f, -1.0f,   1.0f,
             0.5f,  0.5f, -0.5f,   0.0f, 0.0f, 1.0f,   1.0f, 1.0f,   0.0f,  0.0f, -1.0f,   1.0f,
             0.5f,  0.5f, -0.5f,   0.0f, 0.0f, 1.0f,   1.0f, 1.0f,   0.0f,  0.0f, -1.0f,   1.0f,
             0.5f, -0.5f, -0.5f,   1.0f, 1.0f, 0.0f,   0.0f, 1.0f,   0.0f,  0.0f, -1.0f,   1.0f,
            -0.5f, -0.5f, -0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 0.0f,   0.0f,  0.0f, -1.0f,   1.0f,
            // 左面                                                                        
            -0.5f,  0.5f,  0.5f,   1.0f, 0.0f, 0.0f,   1.0f, 0.0f,  -1.0f,  0.0f,  0.0f,   0.0f,
            -0.5f,  0.5f, -0.5f,   0.0f, 1.0f, 0.0f,   1.0f, 1.0f,  -1.0f,  0.0f,  0.0f,   0.0f,
            -0.5f, -0.5f, -0.5f,   0.0f, 0.0f, 1.0f,   0.0f, 1.0f,  -1.0f,  0.0f,  0.0f,   0.0f,
            -0.5f, -0.5f, -0.5f,   0.0f, 0.0f, 1.0f,   0.0f, 1.0f,  -1.0f,  0.0f,  0.0f,   0.0f,
            -0.5f, -0.5f,  0.5f,   1.0f, 1.0f, 0.0f,   0.0f, 0.0f,  -1.0f,  0.0f,  0.0f,   0.0f,
            -0.5f,  0.5f,  0.5f,   1.0f, 0.0f, 0.0f,   1.0f, 0.0f,  -1.0f,  0.0f,  0.0f,   0.0f,
            // 右面                                                                        
             0.5f,  0.5f,  0.5f,   1.0f, 0.0f, 0.0f,   1.0f, 0.0f,   1.0f,  0.0f,  0.0f,   0.0f,
             0.5f, -0.5f, -0.5f,   0.0f, 1.0f, 0.0f,   0.0f, 1.0f,   1.0f,  0.0f,  0.0f,   0.0f,
             0.5f,  0.5f, -0.5f,   0.0f, 0.0f, 1.0f,   1.0f, 1.0f,   1.0f,  0.0f,  0.0f,   0.0f,
             0.5f, -0.5f, -0.5f,   0.0f, 1.0f, 0.0f,   0.0f, 1.0f,   1.0f,  0.0f,  0.0f,   0.0f,
             0.5f,  0.5f,  0.5f,   1.0f, 0.0f, 0.0f,   1.0f, 0.0f,   1.0f,  0.0f,  0.0f,   0.0f,
             0.5f, -0.5f,  0.5f,   1.0f, 1.0f, 0.0f,   0.0f, 0.0f,   1.0f,  0.0f,  0.0f,   0.0f,
            // 顶面                                                                        
            -0.5f,  0.5f, -0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 1.0f,   0.0f,  1.0f,  0.0f,   0.0f,
            -0.5f,  0.5f,  0.5f,   0.0f, 1.0f, 0.0f,   0.0f, 0.0f,   0.0f,  1.0f,  0.0f,   0.0f,
             0.5f,  0.5f,  0.5f,   0.0f, 0.0f, 1.0f,   1.0f, 0.0f,   0.0f,  1.0f,  0.0f,   0.0f,
             0.5f,  0.5f,  0.5f,   0.0f, 0.0f, 1.0f,   1.0f, 0.0f,   0.0f,  1.0f,  0.0f,   0.0f,
             0.5f,  0.5f, -0.5f,   1.0f, 1.0f, 0.0f,   1.0f, 1.0f,   0.0f,  1.0f,  0.0f,   0.0f,
            -0.5f,  0.5f, -0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 1.0f,   0.0f,  1.0f,  0.0f,   0.0f,
            // 底面                                                                        
            -0.5f, -0.5f, -0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 1.0f,   0.0f, -1.0f,  0.0f,   0.0f,
             0.5f, -0.5f, -0.5f,   0.0f, 1.0f, 0.0f,   1.0f, 1.0f,   0.0f, -1.0f,  0.0f,   0.0f,
             0.5f, -0.5f,  0.5f,   0.0f, 0.0f, 1.0f,   1.0f, 0.0f,   0.0f, -1.0f,  0.0f,   0.0f,
             0.5f, -0.5f,  0.5f,   0.0f, 0.0f, 1.0f,   1.0f, 0.0f,   0.0f, -1.0f,  0.0f,   0.0f,
            -0.5f, -0.5f,  0.5f,   1.0f, 1.0f, 0.0f,   0.0f, 0.0f,   0.0f, -1.0f,  0.0f,   0.0f,
            -0.5f, -0.5f, -0.5f,   1.0f, 0.0f, 0.0f,   0.0f, 1.0f,   0.0f, -1.0f,  0.0f,   0.0f
        };

        // index buffer 索引缓冲区
        unsigned int indices[] = {
            0, 1, 2, 2, 3, 0, // 前面
            4, 5, 6, 6, 7, 4, // 后面
            8, 9, 10, 10, 11, 8, // 左面
            12, 13, 14, 14, 15, 12, // 右面
            16, 17, 18, 18, 19, 16, // 上面
            20, 21, 22, 22, 23, 20 // 下面
        };

        GLCall(glEnable(GL_DEPTH_TEST)); // 启用深度测试
        GLCall(glEnable(GL_BLEND)); // 启用混合
        GLCall(glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA));

        VertexArray va;
        VertexBuffer vb(vertices, sizeof(vertices)); // VertexBuffer对象

        VertexBufferLayout layout;
        layout.Push<float>(3); // position
        layout.Push<float>(3); // color
        layout.Push<float>(2); // texture coord
        layout.Push<float>(3); // normal
        layout.Push<float>(1); // texture index

        va.AddBuffer(vb, layout);
        // IndexBuffer ib(indices, 6);

        //glm::mat4 projection = glm::ortho(-1.6f, 1.6f, -0.9f, 0.9f, -1.0f, 1.0f); // 正交矩阵
        glm::mat4 projection = UNIT_MAT4;
        projection = glm::perspective(fov_y, aspectRatio, 0.1f, 100.0f);
        glm::mat4 scale = glm::scale(glm::mat4(1.0f), glm::vec3(image_scale[0], image_scale[1], image_scale[2])); // 缩放矩阵
        // glm::mat4 view = glm::translate(glm::mat4(1.0f), glm::vec3(0, 0, -3.0f));
        glm::mat4 view = UNIT_MAT4;
        view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);
        glm::mat4 model = scale;

        float rotateAngel = 0.0f;
        float rotateSpeed = 1.0f;
        float rotateAxis[3] = { 1.0f, 0.5f, 0.5f };

        objectShader.Use();

        objectShader.SetUniform<glm::mat4>("view", view);
        objectShader.SetUniform<glm::mat4>("model", model);
        objectShader.SetUniform<glm::mat4>("projection", projection);
        objectShader.SetUniform("viewPos", cameraPos.x, cameraPos.y, cameraPos.z);
        objectShader.SetUniform("pureObjectColor", PURE_WHITE);
        objectShader.SetUniform("light.position", lightPos.x, lightPos.y, lightPos.z);
        objectShader.SetUniform("light.ambient", lightColor.x * 0.2f, lightColor.y * 0.2f, lightColor.z * 0.2f);
        objectShader.SetUniform("light.diffuse", lightColor.x * 0.5f, lightColor.y * 0.5f, lightColor.z * 0.5f);
        objectShader.SetUniform("light.specular", 1.0f, 1.0f, 1.0f);
        objectShader.SetUniform<bool>("showTexture", showTexture);

        objectShader.SetUniform("material.shininess", 32.0f);

        Texture texture1("res/textures/asuka.png");
        texture1.Bind(0);
        objectShader.SetUniform("ourTexture1", 0); // glUniform1i可以给纹理采样器分配一个位置值，能够在一个片段着色器中设置多个纹理。一个纹理的位置值通常称为一个纹理单元(Texture Unit)

        Texture texture_diffuse("res/textures/container.png");
        texture_diffuse.Bind(1);
        objectShader.SetUniform("material.diffuse", 1);

        Texture texture_specular("res/textures/container_specular.png");
        texture_specular.Bind(2);
        objectShader.SetUniform("material.specular", 2);

        Texture texture_emission("res/textures/dots.png");
        texture_emission.Bind(3);
        objectShader.SetUniform("material.emission", 3);

        objectShader.UnUse();
        lightShader.Use();

        glm::mat4 light_model = UNIT_MAT4;
        light_model = glm::translate(light_model, lightPos);
        light_model = glm::scale(light_model, glm::vec3(0.1f));
        lightShader.SetUniform("lightColor", lightColor.x, lightColor.y, lightColor.z);
        lightShader.SetUniform<glm::mat4>("model", light_model);
        lightShader.SetUniform<glm::mat4>("view", view);
        lightShader.SetUniform<glm::mat4>("projection", projection);

        va.Unbind();
        vb.UnBind();
        // ib.UnBind();
        objectShader.UnUse();
        lightShader.UnUse();

#pragma region ImGuiInit

        Gui& gui = Gui::getInstance();
        Gui::getInstance().Init(window, true, glsl_version);
        Gui::getInstance().SetFont("res/font/consola.ttf", ui_scale);
        Gui::getInstance().SetFontGlobalScale(ui_scale);
        ImGuiIO& io = Gui::getInstance().GetIO();

        bool show_demo_window = false;

#pragma endregion ImGuiInit

        Renderer& renderer = Renderer::getInstance();
        
        while (!glfwWindowShouldClose(window)) // =====================================================
        {
            renderer.Clear();
            renderer.SetBgColor(clear_color);

            timer::SyncTime();
            cameraMove = cameraSpeed * timer::deltaTime;
            ctrl::MoveCamera();

            // 让灯光绕圆旋转
            if (isLightRolling) {
                lightPos.x = 1.0f + sin(glfwGetTime()) * 2.0f;
                lightPos.y = sin(glfwGetTime() / 2.0f) * 1.0f;
            }

#pragma region ImGuiLoop

            Gui::getInstance().StartDraw();
            // 1. Show the big demo window (Most of the sample code is in ImGui::ShowDemoWindow()! You can browse its code to learn more about Dear ImGui!).
            // if (show_demo_window) { ImGui::ShowDemoWindow(&show_demo_window); }
            // ImGui::Checkbox("Demo Window", &show_demo_window);      // Edit bools storing our window open/close state
            // 2. Show a simple window that we create ourselves. We use a Begin/End pair to create a named window.
            {
                ImGui::Begin("Cube");  
                ImGui::ColorEdit3("Clear Color", (float*)&clear_color); // Edit 3 floats representing a color

                ImGui::Dummy(ImVec2(0.0f, 10.0f));
                ImGui::Text("Transform");
                ImGui::SameLine();
                if (ImGui::Checkbox("Frame Mode", &ctrl::isWireframe)) { ctrl::SetFrameMode(); }
                if (ImGui::ColorEdit3("Object Color", (float*)&pureObjectColor)) {}
                ImGui::SliderFloat3("Scale", image_scale, 0.01f, 4.0f);
                ImGui::SliderFloat("Rotate Speed", &rotateSpeed, 0.0f, 10.0f);
                ImGui::SliderFloat3("Rotate Axis", rotateAxis, -1.0f, 1.0f);
                ImGui::SliderFloat("Rotate Angel", &rotateAngel, -360.0f, 360.0f);

                ImGui::Dummy(ImVec2(0.0f, 10.0f));
                ImGui::Text("Camera");
                ImGui::SliderFloat("Camera Speed", &cameraSpeed, 0.0f, 10.0f);
                if (ImGui::Button("Print")) {
                    std::cout << "camera position: " << cameraPos.x << ", " << cameraPos.y << ", " << cameraPos.z << std::endl;
                    std::cout << "rotateAngel: " << rotateAngel << "  rotateAxis: " << rotateAxis[0] << ", " << rotateAxis[1] << ", " << rotateAxis[2] << std::endl;
                }
                ImGui::SameLine();
                if (ImGui::Button("Reset")) {
                    image_scale[0] = 1.0f;
                    image_scale[1] = 1.0f;
                    image_scale[2] = 1.0f;
                    rotateAngel = 0.0f;
                    rotateSpeed = 1.0f;
                    rotateAxis[0] = 1.0f;
                    rotateAxis[1] = 0.5f;
                    rotateAxis[2] = 0.5f;
                    cameraSpeed = 3.0f;
                    cameraPos = glm::vec3(0.0f, 0.0f, 4.0f);
                    lightColor = ImVec4(PURE_WHITE, 1.00f);
                    lightPos = glm::vec3(1.2f, 1.0f, 2.0f);
                    isLightRolling = false;
                    showTexture = true;
                    ctrl::isWireframe = false;
                }

                ImGui::Dummy(ImVec2(0.0f, 10.0f));
                ImGui::Text("Shader");
                if (ImGui::Checkbox("Show Texture", &showTexture)) {}
                if (ImGui::Combo("Shader Debug", &debugMode, debugModes, IM_ARRAYSIZE(debugModes))) {}
                if (ImGui::SliderInt("Debug Mode", &debugMode, 0, 2)) {}

                ImGui::Dummy(ImVec2(0.0f, 10.0f));
                ImGui::Text("Light");
                ImGui::SameLine();
                if (ImGui::Checkbox("Light Rolling", &isLightRolling)) {} // 目前在不转的时候仍然在计时。应该在切换成静止状态的时候缓存一下当前的位置，懒得写
                if (ImGui::ColorEdit3("Light Color", (float*)&lightColor)) {}

                ImGui::Dummy(ImVec2(0.0f, 30.0f));
                ImGui::Text(" %.3f ms/frame (%.1f FPS)", 1000.0f / io.Framerate, io.Framerate);
                ImGui::End();
            }

#pragma endregion ImGuiLoop

            objectShader.Use();

            texture1.Bind(0);
            texture_diffuse.Bind(1);
            texture_specular.Bind(2);
            texture_emission.Bind(3);

            glm::mat4 model = UNIT_MAT4;
            model = glm::translate(model, glm::vec3(0.0f));
            model = glm::rotate(model, rotateAngel, glm::vec3(rotateAxis[0], rotateAxis[1], rotateAxis[2]));
            model = glm::rotate(model, (float)glfwGetTime() * rotateSpeed, glm::vec3(rotateAxis[0], rotateAxis[1], rotateAxis[2]));
            model = glm::scale(model, glm::vec3(image_scale[0], image_scale[1], image_scale[2]));
            
            view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);

            objectShader.SetUniform<glm::mat4>("projection", projection);
            objectShader.SetUniform<glm::mat4>("view", view);
            objectShader.SetUniform<glm::mat4>("model", model);
            objectShader.SetUniform("viewPos", cameraPos.x, cameraPos.y, cameraPos.z);
            objectShader.SetUniform("light.position", lightPos.x, lightPos.y, lightPos.z);
            objectShader.SetUniform("lightColor", lightColor.x, lightColor.y, lightColor.z);
            objectShader.SetUniform("pureObjectColor", pureObjectColor.x, pureObjectColor.y, pureObjectColor.z);

            objectShader.SetUniform<int>("debugMode", debugMode);
            objectShader.SetUniform<bool>("showTexture", showTexture);

            objectShader.SetUniform<float>("material.shininess", 32.0f);

            objectShader.SetUniform("light.ambient", lightColor.x * 0.5f, lightColor.y * 0.5f, lightColor.z * 0.5f);
            objectShader.SetUniform("light.diffuse", lightColor.x, lightColor.y, lightColor.z);
            objectShader.SetUniform("light.specular", 1.0f, 1.0f, 1.0f);
            objectShader.SetUniform<float>("light.constant", 1.0f);
            objectShader.SetUniform<float>("light.linear", 0.09f);
            objectShader.SetUniform<float>("light.quadratic", 0.032f);
           
            // renderer.DrawElements(va, ib, shader);
            renderer.DrawArrays(va, objectShader, GL_TRIANGLES, 0, 36);

            objectShader.UnUse();
            lightShader.Use();

            light_model = UNIT_MAT4;
            light_model = glm::translate(light_model, lightPos);
            light_model = glm::scale(light_model, glm::vec3(0.1f));
            lightShader.SetUniform("model", light_model);
            lightShader.SetUniform("view", view);
            lightShader.SetUniform("projection", projection);
            lightShader.SetUniform("lightColor", lightColor.x, lightColor.y, lightColor.z);

            renderer.DrawArrays(va, lightShader, GL_TRIANGLES, 0, 36);

            gui.Render(window);
            
            GLCall(glfwSwapBuffers(window)); /* Swap front and back buffers */
            GLCall(glfwPollEvents()); /* Poll for and process events */
        }
    }
    Gui::getInstance().CleanUp();
    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}